<?php

/**
 * GET ALL REPOSITORIES:
 *
 * @param  string $username     [the username of the person]
 * @return array  $repositories [contains an array of repositories]
 */
function getAllRepositories()
{
    // This file is generated by Composer
    if (file_exists('./vendor/autoload.php')) {
        require_once "./vendor/autoload.php";
        $client = new \Github\Client();
        $repositories = $client->api('user')->repositories(GITHUB_USERNAME);
        $repositories = addImagesFromRepos($repositories);
        return $repositories;
    } else {
        return 'the file path must be off';
    }
}


/**
 * ADD IMAGES FROM REPOS:
 *
 * @param  string $username [the username of the person]
 * @param  object $repos    [these contain all the data for each repo]
 * @return string $images   [url for the image!]
 */
function addImagesFromRepos($repos)
{
    $count = 0;
    // $images = array();
    foreach ($repos as $repo) {
        $repos[$count]['image'] = "https://raw.githubusercontent.com/" . GITHUB_USERNAME . "/". $repo['name'] . "/" . $repo['default_branch'] . "/" . $repo['name'] . ".png";
        $count++;
    }
    return $repos;
}


// $image_urls[] = "http://url_of_image_to_be_resized"; // image being pulled in from github
// $cachedImages = array(); // array of locally cached images

// if (empty(dirName($cachedImages))) {
//     // pull in all the images and cache them with the ending of the url
// } else {
//     foreach ($cachedImages as $cachedImage) {
//         foreach ($image_urls as $image_url) {
//             if (getName($image_url) == getName($cachedImage) && sizex($image_url) < sizex($cachedImage)) { // if the size of the external image is smaller than the size of the internal image
//                 // cache the external image overwriting the old one
//                 // $new_cached_image = "file path to the newly cached image";
//                 // $images[] = $new_cached_image; // add the newly cached image
//             } else {
//                 // run the image resize function on the external image url
//                 // then cache that
//             }
//         }
//     }
// }


/**
 * URL EXISTS:
 *
 * @param  string  $url [the url to be tested]
 * @return boolean      [true or false]
 */
function url_exists($url)
{
    $file = $url;
    $file_headers = @get_headers($file);
    if($file_headers[0] == 'HTTP/1.1 404 Not Found') {
        $exists = false;
    } else {
        $exists = true;
    }
    return $exists;
}

/**
 * LIVE DEMO:
 */
function addLiveDemo()
{
    # code...
}


/**
 * IMAGES SCALING:          (Resource: http://goo.gl/5SBZcd)
 *
 * @param string  $ini_path Path to initial image.
 * @param string $dest_path Path to save new image.
 * @param array $params [optional] Must be an associative array of params
 * $params['width'] int New image width.
 * $params['height'] int New image height.
 * $params['constraint'] array.$params['constraint']['width'], $params['constraint'][height]
 * If specified the $width and $height params will be ignored.
 * New image will be resized to specified value either by width or height.
 * $params['aspect_ratio'] bool If false new image will be stretched to specified values.
 * If true aspect ratio will be preserved an empty space filled with color $params['rgb']
 * It has no sense for $params['constraint'].
 * $params['crop'] bool If true new image will be cropped to fit specified dimensions. It has no sense for $params['constraint'].
 * $params['rgb'] Hex code of background color. Default 0xFFFFFF.
 * $params['quality'] int New image quality (0 - 100). Default 100.
 * @return bool True on success.
 */
function img_resize($ini_path, $dest_path, $params = array()) {
    $width = !empty($params['width']) ? $params['width'] : null;
    $height = !empty($params['height']) ? $params['height'] : null;
    $constraint = !empty($params['constraint']) ? $params['constraint'] : false;
    $rgb = !empty($params['rgb']) ?  $params['rgb'] : 0xFFFFFF;
    $quality = !empty($params['quality']) ?  $params['quality'] : 100;
    $aspect_ratio = isset($params['aspect_ratio']) ?  $params['aspect_ratio'] : true;
    $crop = isset($params['crop']) ?  $params['crop'] : true;

    if (!file_exists($ini_path)) return false;


    if (!is_dir($dir=dirname($dest_path))) mkdir($dir);

    $img_info = getimagesize($ini_path);
    if ($img_info === false) return false;

    $ini_p = $img_info[0]/$img_info[1];
    if ($constraint) {
        $con_p = $constraint['width']/$constraint['height'];
        $calc_p = $constraint['width']/$img_info[0];

        if ($ini_p < $con_p) {
            $height = $constraint['height'];
            $width = $height*$ini_p;
        } else {
            $width = $constraint['width'];
            $height = $img_info[1]*$calc_p;
        }
    } else {
        if (!$width && $height) {
            $width = ($height*$img_info[0])/$img_info[1];
        } else if (!$height && $width) {
            $height = ($width*$img_info[1])/$img_info[0];
        } else if (!$height && !$width) {
            $width = $img_info[0];
            $height = $img_info[1];
        }
    }

    preg_match('/\.([^\.]+)$/i',basename($dest_path), $match);
    $ext = $match[1];
    $output_format = ($ext == 'jpg') ? 'jpeg' : $ext;

    $format = strtolower(substr($img_info['mime'], strpos($img_info['mime'], '/')+1));
    $icfunc = "imagecreatefrom" . $format;

    $iresfunc = "image" . $output_format;

    if (!function_exists($icfunc)) return false;

    $dst_x = $dst_y = 0;
    $src_x = $src_y = 0;
    $res_p = $width/$height;
    if ($crop && !$constraint) {
        $dst_w  = $width;
        $dst_h = $height;
        if ($ini_p > $res_p) {
            $src_h = $img_info[1];
            $src_w = $img_info[1]*$res_p;
            $src_x = ($img_info[0] >= $src_w) ? floor(($img_info[0] - $src_w) / 2) : $src_w;
        } else {
            $src_w = $img_info[0];
            $src_h = $img_info[0]/$res_p;
            $src_y    = ($img_info[1] >= $src_h) ? floor(($img_info[1] - $src_h) / 2) : $src_h;
        }
    } else {
        if ($ini_p > $res_p) {
            $dst_w = $width;
            $dst_h = $aspect_ratio ? floor($dst_w/$img_info[0]*$img_info[1]) : $height;
            $dst_y = $aspect_ratio ? floor(($height-$dst_h)/2) : 0;
        } else {
            $dst_h = $height;
            $dst_w = $aspect_ratio ? floor($dst_h/$img_info[1]*$img_info[0]) : $width;
            $dst_x = $aspect_ratio ? floor(($width-$dst_w)/2) : 0;
        }
        $src_w = $img_info[0];
        $src_h = $img_info[1];
    }

    $isrc = $icfunc($ini_path);
    $idest = imagecreatetruecolor($width, $height);
    if (($format == 'png' || $format == 'gif') && $output_format == $format) {
        imagealphablending($idest, false);
        imagesavealpha($idest,true);
        imagefill($idest, 0, 0, IMG_COLOR_TRANSPARENT);
        imagealphablending($isrc, true);
        $quality = 0;
    } else {
        imagefill($idest, 0, 0, $rgb);
    }
    imagecopyresampled($idest, $isrc, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h);
    $res = $iresfunc($idest, $dest_path, $quality);

    imagedestroy($isrc);
    imagedestroy($idest);

    return $res;
}

/**
 * Description:
 * This is the main Controller class.
 *
 */
// class Controller
// {
// 	/**
// 	 * Description:
// 	 * Class constructor function. Initializes all class variables.
// 	 *
// 	 * @param $load       each load is passed
// 	 * @param $method     each method that is passed
// 	 * @param $parameters the arguments for each method
// 	 */
// 	function __construct()
// 	{
// 	}



// 	/**
// 	 * Description:
// 	 * The runTask() method is our way of grabbing the method from the URI string and parsing the
// 	 * parameters. (Uniform Resource Identifier: http://goo.gl/LyRUdP) This is what runs if there is
// 	 * nothing in the URL.
// 	 *
// 	 * @param  $method
// 	 * @param  $parameters
// 	 * @return
// 	 */
// 	public function runTask($method, $parameters = null)
// 	{
// 		if ($method && method_exists($this, $method)) {
// 			//the call_user_func_array expects an array so we create a null array if parameters is empty
// 			if (!is_array($parameters)) {
// 				$parameters = array();
// 			}
//         	call_user_func_array(array($this, $method), $parameters);
//      	}
// 	}

// 	/**
// 	 * Description:
// 	 * The index() method is the one run if no task method is run. Here as a placeholder for
// 	 * child classes.
// 	 *
// 	 * @return [type] [description]
// 	 */
// 	public function index()
// 	{
// 	}

// 	/**
// 	 * Description:
// 	 * This method allows us to more easily set the load variables.
// 	 *
// 	 * @param  $key   	key of the $data array
// 	 * @param  $value 	value of the $data array
// 	 */
// 	public function set($key, $value)
// 	{
// 		$this->data[$key] = $value;
// 	}
// }
